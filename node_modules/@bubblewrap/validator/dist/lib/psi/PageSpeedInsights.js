"use strict";
/*
 * Copyright 2020 Google Inc. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageSpeedInsights = exports.PsiRequestBuilder = exports.PsiRequest = void 0;
const node_fetch_1 = require("node-fetch");
const BASE_PSI_URL = 'https://www.googleapis.com/pagespeedonline/v5/runPagespeed';
/**
 * A wrapper for a request to the PageSpeed Ingights API.
 */
class PsiRequest {
    /**
     * Builds a new PsiRequest;
     * @param url the full URL of the PSI endpoint, with parameters
     */
    constructor(url) {
        this.url = url;
    }
}
exports.PsiRequest = PsiRequest;
/**
 * Builds requests for the PSI endpoint. A full list of parameters is available at
 * https://developers.google.com/speed/docs/insights/v5/reference/pagespeedapi/runpagespeed
 */
class PsiRequestBuilder {
    /**
     * Constructs a new PsiRequestBuilder instance
     * @param validationUrl the URL to be validated
     */
    constructor(validationUrl) {
        this.url = new URL(BASE_PSI_URL);
        this.setUrl(validationUrl);
    }
    /**
     * Sets the URL to be validated
     * @param url the URL to be validated
     */
    setUrl(url) {
        this.url.searchParams.delete('url');
        this.url.searchParams.append('url', url.toString());
        return this;
    }
    /**
     * Sets the strategy to use when validating a PWA.
     * @param {PsiStrategy} strategy
     */
    setStrategy(strategy) {
        this.url.searchParams.delete('strategy');
        this.url.searchParams.append('strategy', strategy);
        return this;
    }
    /**
     * Adds a category to be added when generating the PSI report.
     * @param {PsiCategory} category
     */
    addCategory(category) {
        this.url.searchParams.append('category', category);
        return this;
    }
    /**
     * Builds a PsiRequest using the parameters in this builder.
     * @returns {PsiRequest}
     */
    build() {
        return new PsiRequest(this.url);
    }
}
exports.PsiRequestBuilder = PsiRequestBuilder;
/**
 * A Wrapper for the PageSpeedInsights API.
 *
 * More information on the API is available at:
 * - https://developers.google.com/speed/docs/insights/v5/get-started
 */
class PageSpeedInsights {
    async runPageSpeedInsights(request) {
        const response = await node_fetch_1.default(request.url);
        if (response.status !== 200) {
            throw new Error(`Failed to run the PageSpeed Insight report for ${request.url}. ` +
                `Server responded with status ${response.status}`);
        }
        return (await response.json());
    }
}
exports.PageSpeedInsights = PageSpeedInsights;
